<?php
declare(strict_types=1);

use Magento\Framework\Escaper;
use Magento\Framework\View\Element\Template;

/** @version 0.0.12 */
/** @var Template $block */
/** @var Escaper $escaper */
?>
<script>
    const LumaMiniCartComponentType = {
        cart: {},
        loading: false,
        init() {
            LokiToggle.toggle(
                'a.action.showcart',
                this.getMinicartBlock()
            );

            Alpine.effect(() => {
                this.cart = Alpine.store('LokiLocalStorage').get('cart');

                const qty = this.$el.querySelector('span.counter.qty');
                if (qty) {
                    if (this.cart && this.cart.summary_count > 0) {
                        qty.classList.remove('empty');
                    } else {
                        qty.classList.add('empty');
                    }
                }

                const counterNumber = this.$el.querySelector('span.counter-number');
                if (counterNumber) {
                    const hasSummaryCount = this.cart && this.cart.summary_count > 0;
                    counterNumber.innerHTML = hasSummaryCount && this.cart.summary_count;
                }
            });
        },
        getMinicartBlock() {
            return this.$root.querySelector('div.block-minicart');
        },
        qtyClass() {
            return this.cart.summary_count > 0 ? '' : 'empty';
        },
        closeContent() {
            this.getMinicartBlock().style.display = 'none';
        },
        proceedToCheckout() {
            window.location = '<?= /* @noEscape */ $block->getUrl(
                'checkout'
            ) ?>';
        },
        toggleCartItemButton() {
            const cartItemOriginalQty = parseInt(this.$el.getAttribute('data-cart-item-qty'));
            const cartItemNewQty = parseInt(this.$el.value);
            const cartItemButton = this.$el.parentNode.querySelector('button');
            cartItemButton.style.display = (cartItemNewQty !== cartItemOriginalQty) ? 'inline-block' : 'none';
        },
        updateCartItemQty() {
            const cartItemId = this.$el.getAttribute('data-cart-item-id');
            const cartItemInput = document.getElementById('cart-item-' + cartItemId + '-qty');
            const cartItemQty = parseInt(cartItemInput.value);
            const cartItem = this.cart.items.find((item) => item.item_id === cartItemId);
            const currentQty = parseInt(cartItem.qty);

            if (currentQty === cartItemQty) {
                return;
            }

            const ajaxUpdateUrl = '<?= /* @noEscape */ $block->getUrl(
                'checkout/sidebar/updateItemQty'
            ) ?>';

            this.loading = true;
            fetch(ajaxUpdateUrl, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8',
                },
                body: new URLSearchParams({
                    'item_id': cartItemId,
                    'item_qty': cartItemQty,
                    'form_key': window.LOKI_FORM_KEY
                })
            })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        Alpine.store('LokiLocalStorage').refresh('cart,messages', true);
                    }

                    Alpine.store('LokiMessageStore').addNoticeMessage('<?= $escaper->escapeHtml(
                        __('Updated quantity')
                    ) ?>');

                    this.loading = false;
                });
        },
        hasCartItems() {
            if (!this.cart || !this.cart.items) {
                return false;
            }

            return this.cart.items.length > 0;
        },
        hasNoCartItems() {
            return !this.hasCartItems();
        },
        removeCartItem(event) {
            const cartItemId = this.$el.getAttribute('data-cart-item');

            const ajaxUpdateUrl = '<?= /* @noEscape */ $block->getUrl(
                'checkout/sidebar/removeItem'
            ) ?>';

            fetch(ajaxUpdateUrl, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8',
                },
                body: new URLSearchParams({
                    'item_id': cartItemId,
                    'form_key': window.LOKI_FORM_KEY
                })
            })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        Alpine.store('LokiLocalStorage').refresh('cart,messages', true);
                    }

                    Alpine.store('LokiMessageStore').addNoticeMessage('<?= $escaper->escapeHtml(
                        __('Removed item')
                    ) ?>');
                });
        }
    }
</script>
