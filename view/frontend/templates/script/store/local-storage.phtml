<?php
declare(strict_types=1);


use Magento\Framework\View\Element\Template;

/** @version 0.0.5 */
/** @var Template $block */

// @todo: Invalidate sections based on data_id
?>
<script>
    document.addEventListener('alpine:init', () => {
        Alpine.store('LumaLocalStorage', {
            key: 'mage-cache-storage',
            data: {},
            init() {
                const storedData = localStorage.getItem(this.key);
                this.data = storedData ? JSON.parse(storedData) : null;

                if (!this.data) {
                    this.refresh();
                }
            },
            save() {
                localStorage.setItem(this.key, JSON.stringify(this.data));
            },
            refresh(sections) {
                let url = BASE_URL + '/customer/section/load';
                if (sections) {
                    url += '?sections=' + sections;
                }

                fetch(url)
                    .then((response) => {
                        return response.json();
                    })
                    .then(newData => {
                        if (typeof newData === 'object') {
                            this.data = Object.assign(this.get(), newData);
                            this.save();
                        }
                    })
            },
            get(key) {
                if (!this.data) {
                    return {};
                }

                if (key === undefined) {
                    return this.data;
                }

                if (!this.data.hasOwnProperty(key) || !this.data[key] ) {
                    this.refresh(key);
                }

                return this.data[key];
            },
            set(key, value) {
                this.data[key] = value;
                this.save();
            },
            remove(key) {
                delete this.data[key];
                this.save();
            },
            reset() {
                this.data = {};
                localStorage.removeItem(this.key);
            }
        });

        Alpine.store('LumaMessageStore', {
            addMessage(type, text) {
                const store = Alpine.store('LumaLocalStorage');
                const messageSection = store.get('messages') ?? {};
                const messages = messageSection.messages ?? [];
                messages.push({type, text});
                messageSection.messages = messages;
                store.set('messages', messageSection);
            },
            addErrorMessage(text) {
                this.addMessage('error', text);
            },
            addWarningMessage(text) {
                this.addMessage('warning', text);
            },
            addSuccessMessage(text) {
                this.addMessage('success', text);
            },
            addNoticeMessage(text) {
                this.addMessage('notice', text);
            }
        });
    });
</script>
